{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGVC,mBAAS,IAHC,mBAGvCC,EAHuC,KAG3BC,EAH2B,KA+B9C,OACI,sBAAMC,SApBW,SAACC,GAClBA,EAAEC,iBAMGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEvCN,EAAc,MASlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SA9Bc,SAACP,GAGvBF,EAAeE,EAAEQ,OAAOF,a,+BCXnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,iDAGoCC,UAAWH,GAH/C,+DAMAI,MAAOF,GANP,cAMbG,EANa,gBAOIA,EAAKC,OAPT,uBAOXC,EAPW,EAOXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAdvB,kBAkBZM,GAlBY,4CAAH,sDCDPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAKjC,OAEI,cADA,CACA,OAAKc,UAAU,yCAAf,UAEI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCGJO,EAAU,SAAC,GAAmB,IAAhBnB,EAAe,EAAfA,SAAe,ECVd,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAgCxC,OAzBAC,qBAAU,WAENxB,EAASC,GACAwB,MAAM,SAAAC,GAICH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAO9B,CAACpB,IASGqB,EDjB2BK,CAAc1B,GAAlCa,EALwB,EAK9BN,KAAca,EALgB,EAKhBA,QAwCtB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAGlDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAGQA,GAFEA,EAAIC,aElEzBgB,EAAe,WAAM,MAKMzC,mBAAS,CAAC,cALhB,mBAKvB0C,EALuB,KAKX3C,EALW,KAuB9B,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAIA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OAEpB,aADA,CACC,EAAD,CAEIA,SAAWA,GADLA,Y,MCpClC6B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f6124bc0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n// TAREA: Importamos el paquete props-types\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    // Hook useState\r\n    const [inputValue, setInputValue] = useState(''); // inicializamos a string vacio, si no es undefined y falla el campo input del form\r\n\r\n    // Manejador de eventos del input,. Con esto el valor inputValue está SIEMPRE actualizado y lo podemos usar en todos los sitios\r\n    const handleInputChange = (e) => {\r\n        // console.log(e.target.value)\r\n        // Cambiamos el inputValue con el setInputValue del hook\r\n        setInputValue( e.target.value );\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n         \r\n        // TAREA: recibir la funcion setCatergories desde el el componente padre GifExpertApp y usarla para añadir la categoria escrita en el input\r\n        // setCategories(e.target.value); // esto falla, poruqe al hacer el map de categories nulas falla\r\n\r\n        // Validamos que venga algo en el campo inputValue\r\n        if ( inputValue.trim().length > 2 ) {\r\n            // Añadimos el valor a las categories\r\n            setCategories( cats => [inputValue, ...cats ] ); // Hay que hacerlo así porque no tenemos el acceso a las categorias y falla\r\n            // Inicializamods el campo inputValue\r\n            setInputValue('');\r\n        }\r\n\r\n        // console.log('Submit hecho')\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n};\r\n\r\n// TAREA: Definimos el tipo de las propiedades:\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};","\r\n\r\n// Funcion para peticiones a Giphy\r\nexport const getGifs = async( category ) => {\r\n\r\n    // Url de Giphy\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=IcR3aqTu1p3aTSeQOL1CezHJE3QL2IXu`;\r\n\r\n    // Hacemos el Fetch\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    // Recuperamos los datos qyue nos interesan de data\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url // Con ?, indica si vienen img.images, entonces usa el resto\r\n        }\r\n    }); \r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n\r\n    // console.log(props);\r\n    // console.log( {id, title, url} )\r\n\r\n    return (\r\n        // class=\"\" no se pude usar porque esto es un archivo JS y class es un a palabra reservada de JS\r\n        <div className=\"card animate__animated animate__fadeIn\"> \r\n            {/* { img.title } */}\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","// import React, { useState, useEffect } from 'react'\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\n// export const GifGrid = () => {\r\n//     return (\r\n//         <div>\r\n            \r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category }) => {\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n    // Importamos nuestro custom hook useFetchGifs\r\n    const { data: images, loading } = useFetchGifs( category ); // ernviamos como argumento la categoria\r\n\r\n    // Veamos el problema con el useSate\r\n    // const [count, setCount] = useState(0); // Al poner un contador+1, cada vez que cambia, react renderizea todo el componente ===>\r\n    // vuelve a ejecutarse TODO el codigo del componente, incluido getGifs() y aparte de que estamos haciendo peticiones cada vez,\r\n    // si en vez de console.log(), ponemos un metodo setImages() ===> vuelve a renderizar y entra en un BUCLE SIN FIN!!!\r\n    // Para soslayar esto, está el hook: useEffect\r\n\r\n    // // Hook useEffect\r\n    // useEffect( () => {\r\n    //     // getGifs();\r\n    //     getGifs( category )\r\n    //     // .then( imgs => setImages(imgs) ); // podemos simplificarlo aun más porque recibe un argumento que se vuelve a enviar de nuevo sin cambios\r\n    //     .then( setImages )\r\n    // }, [ category ]); // el segundo parametro es un array [] de dependencias, si no mandamos nada, sólo se ejecuta una sóla vez\r\n\r\n    // // Funcion para peticiones a Giphy\r\n    // const getGifs = async() => {\r\n\r\n    //     // Url de Giphy\r\n    //     const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=IcR3aqTu1p3aTSeQOL1CezHJE3QL2IXu`;\r\n\r\n    //     // Hacemos el Fetch\r\n    //     const resp = await fetch( url );\r\n    //     const { data } = await resp.json();\r\n\r\n    //     // Recuperamos los datos qyue nos interesan de data\r\n    //     const gifs = data.map( img => {\r\n    //         return {\r\n    //             id: img.id,\r\n    //             title: img.title,\r\n    //             url: img.images?.downsized_medium.url // Con ?, indoica si vienen img.images, entonces usa el resto\r\n    //         }\r\n    //     }); \r\n\r\n    //     console.log(gifs);\r\n    //     setImages( gifs );\r\n\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n            {/* loading ? 'cargando...' : 'Datos de gifs cargados' */}\r\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem\r\n                            key={ img.id }\r\n                            // img={ img }\r\n                            {...img} // Usamos el operador spread\r\n                        />    \r\n                    ))\r\n                }\r\n                {/* <ol>\r\n                    TAREA: Poner los titulos de las imagenes en una lista ordenada\r\n                    {\r\n                        // images.map( image => (\r\n                        images.map( ( {id, title } ) => ( // desctructuramos image\r\n                            // <li key={ category }>{ category }</li>\r\n                            <li key={ id }>{ title }</li>    \r\n                        ))\r\n                    }\r\n                </ol>\r\n                <h3>{count}</h3>\r\n                <button onClick={ () => setCount( count + 1 )}>+1</button>*/}\r\n            </div> \r\n        </>\r\n    )\r\n}\r\n","// Custom Hook useFetchGifs\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs( category ) // esto retorna una promesa\r\n                .then( imgs => {\r\n\r\n                    //setTimeout( () => {\r\n\r\n                        setState({\r\n                            data: imgs,\r\n                            loading: false\r\n                        });\r\n                        \r\n                    //}, 3000);\r\n\r\n                });\r\n        \r\n    }, [category]); // solo lo ejecutamos cuando la categoria cambia\r\n\r\n    // setTimeout( () => {\r\n    //     setState({\r\n    //         data: [1,2,3,4,5,6,7],\r\n    //         loading: false\r\n    //     });\r\n    // }, 3000);\r\n\r\n    return state; // {data: [], loading: true}\r\n\r\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n// Componente GifexpertApp\nexport const GifExpertApp = () => {\n\n    // Definimos categorias\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball']; // Esto es constante y no se puede cambiar y además no se rendereiza si le añadimos categorias\n    // Usamos el hook useState\n    const [categories, setCategories] = useState(['One Punch']);// useState(['One Punch', 'Samurai X', 'Dragon Ball']);\n\n    // TAREA: Manejador del boton\n    // const handleAdd = () => {\n    //     // setCategories('HunterXHunter'); // Esto falla poruwe machacamos el estado inicial del useState y lo convertimos de arrayb [] a string 'HunterXHunter'\n\n    //     // setCategories([...categories, 'HunterXHunter']); // Usamos el operador spread ... para recuperar el array de categorias y le añadimos al final 'HunterXHunter'\n    //     // setCategories(['HunterXHunter', ...categories]); // Usamos el operador spread ... para recuperar el array de categorias y le añadimos al principio 'HunterXHunter'\n    //     // Usando callback\n    //     setCategories( cats => [...cats, 'HunterXHunter']);\n\n    //     console.log(categories);\n    // };\n\n    // console.log(categories);\n\n    // Pasamos al componente AddCategory la referencia a la función setCatregories para que sea accesible\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n\n            <AddCategory setCategories={ setCategories }/> \n\n            <hr />\n\n            {/* <button onClick={ handleAdd }>Añadir Categoría</button> */}\n\n            <ol>\n                {\n                    categories.map( category => (\n                        // <li key={ category }>{ category }</li>\n                        <GifGrid\n                            key={ category }\n                            category={ category} \n                        />    \n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);"],"sourceRoot":""}